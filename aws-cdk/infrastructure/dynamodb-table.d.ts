import * as dynamodb from "@aws-cdk/aws-dynamodb";
import * as ecs from "@aws-cdk/aws-ecs";
import * as cdk from "@aws-cdk/core";
import { ContainerMutatingHook, ServiceExtension, Service } from "@aws-cdk-containers/ecs-service-extensions";
export interface DynamoDBTableHookProps {
    table: dynamodb.Table;
    environmentVariableName: string;
}
/**
 * This hook modifies the application container by adding an environment
 * variable which contains the autogenerated table name. This allows you to
 * avoid hardcoding a table name in your application and instead use the
 * environment variable to find the table.
 */
export declare class DynamoDBTableHook extends ContainerMutatingHook {
    props: DynamoDBTableHookProps;
    constructor(props: DynamoDBTableHookProps);
    mutateContainerDefinition(props: ecs.ContainerDefinitionProps): {
        environment: {
            [key: string]: string;
        };
        taskDefinition: ecs.TaskDefinition;
        image: ecs.ContainerImage;
        command?: string[] | undefined;
        cpu?: number | undefined;
        disableNetworking?: boolean | undefined;
        dnsSearchDomains?: string[] | undefined;
        dnsServers?: string[] | undefined;
        dockerLabels?: {
            [key: string]: string;
        } | undefined;
        dockerSecurityOptions?: string[] | undefined;
        entryPoint?: string[] | undefined;
        secrets?: {
            [key: string]: ecs.Secret;
        } | undefined;
        startTimeout?: cdk.Duration | undefined;
        stopTimeout?: cdk.Duration | undefined;
        essential?: boolean | undefined;
        extraHosts?: {
            [name: string]: string;
        } | undefined;
        healthCheck?: ecs.HealthCheck | undefined;
        hostname?: string | undefined;
        memoryLimitMiB?: number | undefined;
        memoryReservationMiB?: number | undefined;
        privileged?: boolean | undefined;
        readonlyRootFilesystem?: boolean | undefined;
        user?: string | undefined;
        workingDirectory?: string | undefined;
        logging?: ecs.LogDriver | undefined;
        linuxParameters?: ecs.LinuxParameters | undefined;
        gpuCount?: number | undefined;
    };
}
export interface TableProps extends dynamodb.TableProps {
    table?: dynamodb.Table;
    environmentVariableName?: string;
}
/**
 * This addon adds a DynamoDB table to a service
 */
export declare class DynamoDbTable extends ServiceExtension {
    private props;
    private environmentVariableName;
    private table?;
    private tableName;
    constructor(tableName: string, props: TableProps);
    prehook(service: Service, scope: cdk.Construct): void;
    addHooks(): void;
    useTaskDefinition(taskDefinition: ecs.TaskDefinition): void;
}
