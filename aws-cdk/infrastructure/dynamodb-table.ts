import { aws_ecs as ecs } from 'aws-cdk-lib';
import { aws_dynamodb as dynamodb } from 'aws-cdk-lib';
import { ContainerMutatingHook, ServiceExtension, Service } from "@aws-cdk-containers/ecs-service-extensions";

// keep this import separate from other imports to reduce chance for merge conflicts with v2-main
// eslint-disable-next-line no-duplicate-imports, import/order
import { Construct } from 'constructs';

export interface DynamoDBTableHookProps {
  table: dynamodb.Table
  environmentVariableName: string
}

/**
 * This hook modifies the application container by adding an environment
 * variable which contains the autogenerated table name. This allows you to
 * avoid hardcoding a table name in your application and instead use the
 * environment variable to find the table.
 */
export class DynamoDBTableHook extends ContainerMutatingHook {
  props: DynamoDBTableHookProps;

  constructor(props: DynamoDBTableHookProps) {
    super();
    this.props = props;
  }

  mutateContainerDefinition(props: ecs.ContainerDefinitionProps) {
    const environment = props.environment || {};
    environment[this.props.environmentVariableName] = this.props.table.tableName;
    return {
      ...props,
      environment,
    };
  }
}

export interface TableProps extends dynamodb.TableProps {
  table?: dynamodb.Table,
  environmentVariableName?: string
}

/**
 * This addon adds a DynamoDB table to a service
 */
export class DynamoDbTable extends ServiceExtension {
  private props: TableProps;
  private environmentVariableName: string;
  private table?: dynamodb.Table;
  private tableName: string;

  constructor(tableName: string, props: TableProps) {
    super(`table-${tableName}`);

    this.tableName = tableName;
    this.props = props;

    if (props.environmentVariableName) {
      this.environmentVariableName = props.environmentVariableName;
    } else {
      this.environmentVariableName = this.tableName.toUpperCase() + '_NAME';
    }
  }

  // Before the service is created go ahead and create the load balancer itself.
  prehook(service: Service, scope: Construct) {
    this.parentService = service;
    if (this.props.table) {
      this.table = this.props.table;
    } else {
      this.table = new dynamodb.Table(scope, `${this.name}-table`, this.props);
    }
  }

  // Register a hook on the application container to add the
  // table to the env variables on the app container
  addHooks() {
    const container = this.parentService.serviceDescription.get('service-container');
    if (!container) {
      throw new Error('DynamoDB table addon requires an application addon');
    }
    if (!this.table) {
      throw new Error('The DynamoDB table has not been created yet');
    }
    container.addContainerMutatingHook(new DynamoDBTableHook({
      environmentVariableName: this.environmentVariableName,
      table: this.table,
    }));
  }

  // Once the task definition (and its IAM role) have been created
  // grant the task's IAM role access to read and write data from the table
  useTaskDefinition(taskDefinition: ecs.TaskDefinition) {
    if (!this.table) {
      throw new Error('The DynamoDB table has not been created yet');
      return;
    }

    this.table.grantReadWriteData(taskDefinition.taskRole);
  }
}